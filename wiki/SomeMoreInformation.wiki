#labels Featured,Phase-Implementation
= Introduction =

This page includes some tips not listed on main page. Some information could be related to trunk only as some functionality could be missing in current released versions.


= Details =

You may get the list of implemented checks by this command:
{{{
ant checks
}}}

which, in fact, runs the following shell command:
{{{
$cat src/java/net/djarvur/vmbix/VmBix.java|grep "Pattern p[A-Z]"|cut -d "*" -f 3|sed -E 's/\\//g;s/(.*)\(.*\)(.*)"(.*)\);.*\/\//\1name\2\3/g'
status[name]                             :checks host status (not vm)
esx.cpu.load[name,used]              
esx.cpu.load[name,total]             
esx.cpu.load[name,cores]             
esx.memory[name,used]                  
esx.memory[name,total]                 
esx.vms.memory[name,private]           :this is a heavy check. Counts average private          memory usage in % for all powered on vms.
esx.vms.memory[name,shared]            :this is a heavy check. Counts average shared           memory usage in % for all powered on vms.
esx.vms.memory[name,swapped]           :this is a heavy check. Counts average swapped          memory usage in % for all powered on vms.
esx.vms.memory[name,compressed]        :this is a heavy check. Counts average compressed       memory usage in % for all powered on vms.
esx.vms.memory[name,overheadConsumed]  :this is a heavy check. Counts average overheadConsumed memory usage in % for all powered on vms.
esx.vms.memory[name,consumed]          :this is a heavy check. Counts average consumed         memory usage in % for all powered on vms.
esx.vms.memory[name,balooned]          :this is a heavy check. Counts average balooned         memory usage in % for all powered on vms.
esx.vms.memory[name,active]            :this is a heavy check. Counts average active           memory usage in % for all powered on vms.           
vm.cpu.load[name,used]               
vm.cpu.load[name,total]              
vm.memory[name,private]                
vm.memory[name,shared]                 
vm.memory[name,swapped]                
vm.memory[name,compressed]             
vm.memory[name,overheadConsumed]       
vm.memory[name,consumed]               
vm.memory[name,balooned]               
vm.memory[name,active]                 
vm.memory[name,total]                  
datastore.size[name,free]              
datastore.size[name,total]
}}}

This command is tested only on Mac.

= How to implement your own checks =
 # Find a function called
{{{
private void checkAllPatterns                (String string, PrintWriter out  )
}}}
 # Add your own pattern. For example this string:
{{{
Pattern pHostCpuUsed            = Pattern.compile("^(?:\\s*ZBXD.)?.*esx\\.cpu\\.load\\[(.+),used\\]"             );        // :checks host cpu usage
}}}
will be responsible for this item:
{{{
esx.cpu.load[{HOST.DNS},used]
}}}
 # Scroll down to the next block of code in the same function starting with "String found;", add you own "found=" block:
{{{
found = checkPattern(pHostCpuUsed           ,string); if (found != null) { getHostCpuUsed           (found, out); return; }
}}}
This one calls a function called "getHostCpuUsed" with {HOST.DNS} as an a first argument and a PrintWriter instance as a second one.
 # Your function should accept String and PrintWriter arguments. It should return values like that:
{{{
out.print(value + "\n");
out.flush();
}}}

= Version history =

1.0.1
 * Fixed host used memory checks(returned cpu used MHz instead of memory used MB), fixed a custom multiplier for the same item.
 * Added several items:
  * Average private          memory usage in % for all powered on vms.
  * Average shared           memory usage in % for all powered on vms.
  * Average swapped          memory usage in % for all powered on vms.
  * Average compressed       memory usage in % for all powered on vms.
  * Average overheadConsumed memory usage in % for all powered on vms.
  * Average consumed         memory usage in % for all powered on vms.
  * Average balooned         memory usage in % for all powered on vms.
  * Average active           memory usage in % for all powered on vms.

1.0.0
 * First release